% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotD3mirt.R
\name{plotD3mirt}
\alias{plotD3mirt}
\title{Graphical Output for D3mirt}
\usage{
plotD3mirt(
  x,
  scale = FALSE,
  hide = FALSE,
  diff.level = NULL,
  items = NULL,
  item.names = TRUE,
  item.lab = NULL,
  constructs = FALSE,
  construct.lab = NULL,
  adjust.lab = c(0.5, -0.8),
  x.lab = "X",
  y.lab = "Y",
  z.lab = "Z",
  title = "",
  line = -5,
  axis.scalar = c(1.1, 1.1, 1.1),
  axis.col = "black",
  axis.points = "black",
  points = TRUE,
  axis.ticks = TRUE,
  nticks = c(4, 4, 4),
  width.rgl.x = 1040,
  width.rgl.y = 1040,
  view = c(15, 20, 0.6),
  show.plane = TRUE,
  plane.col = "grey80",
  background = "white",
  type = "rotation",
  col = c("black", "grey20", "grey40", "grey60", "grey80"),
  arrow.width = 0.6,
  n = 20,
  theta = 0.2,
  barblen = 0.03,
  c.scalars = c(1, 1),
  c.type = "rotation",
  c.col = "black",
  c.arrow.width = 0.6,
  c.n = 20,
  c.theta = 0.2,
  c.barblen = 0.03,
  profiles = NULL,
  levels = NULL,
  sphere.col = c("black", "grey20", "grey40", "grey60", "grey80"),
  spheres.r = 0.05,
  ellipse = FALSE,
  CI.level = 0.95,
  ellipse.col = "grey80",
  ellipse.alpha = 0.2,
  ...
)
}
\arguments{
\item{x}{S3 object of class \code{D3mirt}.}

\item{scale}{Logical, if item vector arrow length should visualize the MDISC estimates. If set to FALSE, the vector arrow length will be one unit length. Default is \code{scale = FALSE}.}

\item{hide}{Logical, if items should be plotted. Default is \code{hide = FALSE}.}

\item{diff.level}{Optional. Plotting of a single level of difficulty indicated by an integer.}

\item{items}{Optional. The user can input a list of integers indicating what item vector arrows will be visible while the remaining items are hidden.}

\item{item.names}{Logical, if item labels should be plotted. Default is \code{item.names = TRUE}.}

\item{item.lab}{Optional. String vector of item names that will override row names extracted from the data frame.}

\item{constructs}{Logical, if construct vector arrows should be plotted. Default set to FALSE}

\item{construct.lab}{Optional. String vector of names for constructs.}

\item{adjust.lab}{Vector of parameters for the position of item and construct labels for the \code{text3d} function. The first value is for horizontal adjustment and the second is for vertical adjustment. Default is \code{adjust.lab = c(0.5, -0.8)}.}

\item{x.lab}{Labels for x-axis, Default is \code{x.lab = "X"}.}

\item{y.lab}{Labels for y-axis, Default is \code{y.lab = "Y"}.}

\item{z.lab}{Labels for y-axis, Default is \code{z.lab = "Z"}.}

\item{title}{The main title for the graphical device, plotted with the \code{title3d()} function.}

\item{line}{Title placement for \code{title3d()}. Default is \code{line = -5}.}

\item{axis.scalar}{Scalar factors to adjusts the length of the axes (x, y, z) in the 3D model. Default is \code{axis.scalar = c(1.1,1.1,1.1)}}

\item{axis.col}{Color of axis for the \code{segment3D()}function, default is \code{axis.col = "Black"}.}

\item{axis.points}{Color of axis points for the \code{points3d()} function. Default is \code{axis.points = "black"}.}

\item{points}{Logical, if axis from \code{points3d()} have end points. Default is \code{points = TRUE}.}

\item{axis.ticks}{Logical, if axis ticks from the \code{axis3d()} function should be plotted. Default is `axis.ticks = TRUE'.}

\item{nticks}{Number of ticks for \code{axis3d()} indicated with integers for the x, y, and z axes. Default is \code{nticks = c(10,10,10)}.}

\item{width.rgl.x}{Width in the x direction for \code{par3d()}. Default is \code{width.rgl.x = 1040}.}

\item{width.rgl.y}{Width in the y direction for \code{par3d()}. Default is \code{width.rgl.y = 1040}.}

\item{view}{Vector with polar coordinates and zoom factor for the \code{view3d} function. Default is \code{view = c(15,20, 1)}.}

\item{show.plane}{Logical, if xz-plane should be visible in the graphical device. Default is \code{show.plane = TRUE}.}

\item{plane.col}{Color of the plane, default is \code{plane.col = "grey80"}.}

\item{background}{Set background color for the graphical device, Default is \code{background = "white"}.}

\item{type}{Type of vector arrow for items, default is \code{type = "rotation"}. See \link[rgl:arrow3d]{rgl::arrow3d} for more options regarding arrow types.}

\item{col}{Vector of colors representing difficulty levels for item response functions used in \code{arrow3d()}. Default is \code{col = c("black", "grey20", "grey40", "grey60", "grey80")}.}

\item{arrow.width}{Width of vector arrows for \code{arrow3d()}. Default is \code{arrow.width = 0.6}.}

\item{n}{Number of barbs for the vector arrows from \code{arrow3d()}. Default is \code{n = 20}.}

\item{theta}{Opening angle of barbs for vector arrows from \code{arrow3d()}. Default is \code{theta = 0.2}.}

\item{barblen}{The length of the barbs for vector arrows from \code{arrow3d()}. Default is \code{barblen = 0.03}.}

\item{c.scalars}{Set of scalars for adjusting construct arrow length. The first numeric adjust the length in the negative direction and the second numeric the length in the positive direction. Default is \code{c.scalars = c(1,1)}.}

\item{c.type}{Type of vector arrow for constructs. See \link[rgl:arrow3d]{rgl::arrow3d} for more options regarding arrow types. Default is \code{c.type = "rotation"}.}

\item{c.col}{Color for construct vector arrows from \code{arrow3d()}, default is \code{c.col = "black"}.}

\item{c.arrow.width}{Width of construct vector arrows for \code{arrow3d()}. Default is \code{c.arrow.width = 0.6}.}

\item{c.n}{Number of barbs for the construct vector arrows from the \code{arrow3d()} function. Default is \code{c.n = 20}.}

\item{c.theta}{Opening angle of barbs for construct vector arrows from \code{arrow3d()}. Default is \code{c.theta = 0.2}.}

\item{c.barblen}{The length of the barbs for construct vector arrows from \code{arrow3d()}. Default is \code{c.barblen = 0.03}.}

\item{profiles}{Data frame with coordinates for spheres representing respondent scores. Default is \code{profiles = NULL}.}

\item{levels}{Optional. Column with values indicating levels for sphere colors from the \code{sphere.col} vector. Default is \code{levels = NULL}.}

\item{sphere.col}{Color vector for \code{spheres3d()}. Default is \code{sphere.col = c("black", "grey20", "grey40", "grey60", "grey80")}.}

\item{spheres.r}{Radius of the spheres for \code{spheres3d()}. Default is \code{spheres.r = 0.05}.}

\item{ellipse}{Logical, if spheres should include an ellipsoid outlining a confidence region returned from the \code{ellipse3d()} function. Default is \code{ellipse = FALSE}.}

\item{CI.level}{Level of confidence for \code{ellipse3d()}, default is \code{CI.level = 0.95}.}

\item{ellipse.col}{Color of the ellipse from \code{ellipse3d()}. Default is \code{ellipse.col = "grey80"}.}

\item{ellipse.alpha}{Opacity for the confidence region from \code{ellipse3d()}. Default is \code{ellipse.alpha = 0.20}.}

\item{...}{Additional arguments to be passed to RGL or methods.}
}
\value{
A RGL graphical device.
}
\description{
For graphing of objects of class \code{D3mirt} from the \code{\link[=D3mirt]{D3mirt()}} function with the rgl 3D visualization device system (Adler & Murdoch, 2022).
}
\details{
The function is based on the \link{rgl} package (Adler & Murdoch, 2022) for three-dimensional visualization with OpenGL.
The returned RGL device can be exported to the R console and saved as an interactive html file or as a still shoots (see examples below).
In the case of the latter, the model perspective in the still shoot can be manually adjusted or adjusted by changing the \code{view} argument for the function.
}
\section{Plotting options}{
The function allows plotting of all items, a selection of items as well as plotting a single item.
Length of the vector arrows can uniform across all arrows by setting \code{scale = TRUE}.
This removes the visualization of MDISC parameter that affect the vector arrow lengths.

In addition, the user also has the option of adding constructs to the graphical output with \code{constructs = TRUE} (see the documentation for \link{D3mirt} regarding constructs).
Other options include to plot one level of difficulty at a time with the \code{diff.level} argument, if multiple levels of difficulty are used in the model.
Item row names are displayed by default, but the user has the option of adding new names for the items (with \code{item.lab}), as well as nming constructs (with \code{construct.lab}).
}

\section{Visual Profile Analysis}{
The plot function can also display respondent scores in the three-dimensional model space, represented as spheres located with the help of factors scores used as coordinates.
This allows for a profile analysis in which respondent rows are selected conditioned on some external criteria.
To do this, the user must first extract respondent factor scores with \link[mirt:fscores]{mirt::fscores}(Chalmers, 2012) and then use a selection process that subset respondent rows.
The resulting data frame is imputed in the \code{profiles} argument.
A general advice is also to hide vector arrows with \code{hide = TRUE} when analyzing respondent profiles to avoid visual cluttering.
}

\examples{
\dontrun{
# Create S3 object of class D3mirt (see [D3mirt::D3mirt])

# Plot RGL device
plotD3mirt(g)

# Plot RGL device on one level of difficulty
plotD3mirt(g, diff.level = 5)

# Plot RGL device with constructs visible and named
plotD3mirt(g, constructs = TRUE,
construct.lab = c("Fairness", "Conformity", "Compassion"))

# Plot RGL device with scaled items and constructs
plotD3mirt(g, scale = TRUE, constructs = TRUE,
construct.lab = c("Fairness", "Conformity", "Compassion"))

# A selection of items from the model plotted with constructs
plotD3mirt(g, constructs = TRUE, items = c(5,7,8,9,10),
construct.lab = c("Fairness", "Conformity", "Compassion"))

# Profile analysis
# Plot respondents scores separating on gender variable
# Extract respondent factor scores from mod1 with `fscores()` function from [mirt::mirt]
f <- mirt::fscores(mod1, method="EAP", full.scores = TRUE, full.scores.SE = F, QMC = T)

# Attach f to gender variable (column 2 from anes08_09offwaves data set; "W3XGENDER")
# Use cbind with `fscores()` output first
data("anes08_09offwaves")
x <- anes08_09offwaves
z <- data.frame(cbind(f, x[,2]))

# Plot profiles with item vector arrows hidden
# Score levels: 1 = Blue ("male") and 2 = Red ("female")
plotD3mirt(g, hide = TRUE, profiles = y, levels = y[,4], sphere.col = c("blue", "red"),
x.lab = "Compassion", y.lab="Conformity", z.lab="Fairness")

# The use of `rep()`makes it possible to create groups based on factor levels
# This example compares respondents 30 years or younger against 70 years or older
# Column bind `fscores()` with age variable ("W3Xage")
y <- data.frame(cbind(f, x[,1]))

# Subset data frame y conditioned on age <= 30
z1 <- subset(y, y[,4] <= 30)

# Subset data frame y conditioned on age >= 70
z2 <- subset(y, y[,4] >= 70)

Row bind z1 and z2
z <- rbind(z1,z2)

# Check number of factor leveles with `nlevels()` and `as.factor()`
nlevels(as.factor(z1[,4]))
nlevels(as.factor(z2[,4]))

# Use `rep()`to create a color vector to color groups based on the `nlevels()` output
# z1 has 14 factor levels and z2 has 16 factor levels
# z1 respondents are colored black and z2 are colored grey
colvec <- c(rep("black", 14), rep("grey40", 16))

# Call plotD3mirt with profile data on age with item vector arrows hidden
plotD3mirt(g, hide = TRUE, profiles = z, levels = z[,4], sphere.col = colvec,
x.lab = "Compassion", y.lab="Conformity", z.lab="Fairness")

# Export an open RGL device to console and html
plotD3mirt(g, constructs = TRUE)
s <- scene3d()
rgl::rglwidget(s, width = 1040, height = 1040)

# Export a snap shoot of an open RGL device to file
plotD3mirt(g, constructs = TRUE)
rgl::rgl.snapshot('RGLdevice.png', fmt = 'png')
}
}
\references{
Adler, D., & Murdoch, D. (2022). \emph{Rgl: 3d Visualization Using OpenGL}.

Chalmers, R., P. (2012). mirt: A Multidimensional Item Response Theory Package for the R Environment. \emph{Journal of Statistical Software, 48}(6), 1-29.
}
\author{
Erik Forsberg
}
